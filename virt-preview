#!/usr/bin/env python3

import argparse
import logging
import pprint
import re
import subprocess
import sys
import time

import copr.v3
import rpm


log = logging.getLogger(__name__)


# This is the list of dist-git packages in the repo. Ordering here
# is also important because it determines build order
PACKAGE_NAMES = [
    "openbios",
    "seabios",
    "SLOF",
    "edk2",
    "ipxe",
    # Disable virgl, current f32 build requiers new epoxy
    # "virglrenderer",
    "qemu",
    "osinfo-db",
    "libosinfo",
    "osinfo-db-tools",
    "libvirt",
    "libvirt-python",
    "virt-manager",
]

# Mapping of package_name:regex for packages to exclude per chroot.
# Otherwise copr doesn't take Exc*Arch into account and will report
# build failure
EXCLUDE_ARCH = {
    # edk2 ExclusiveArch skips some arches
    # openbios doesn't build on all arches
    # roms require cross-gcc to build but it's unavailable on centos, EPEL
    "edk2": [".*ppc64.*", ".*s390.*", ".*centos.*"],
    "openbios": [".*aarch64.*", ".*s390.*", ".*centos.*"],
    "SLOF": [".*centos.*"],
    "seabios": [".*centos.*"],
    "ipxe": [".*centos.*"],
}

# If a build is failing, put the package name here and it will be skipped
# for all chroots. Set a cal reminder for a few weeks to check if its building
TEMPSKIP = [
]

# Use when I want to disable some chroots before they go EOL. If
# I remove them entirely then users can't access the content anymore AFAICT
SKIPCHROOTS = [
    r"fedora-28.*",
    r"fedora-29.*",
    r"fedora-30.*",
    r"fedora-31.*",
    r"fedora-32.*",
]


def package_skip_chroot(package_name, chroot_name):
    """
    Return True if we shouldn't build `package_name` for `chroot_name` per
    `EXCLUDE_ARCH` mappings
    """
    skip_regexs = EXCLUDE_ARCH.get(package_name, [])
    for regex in skip_regexs:
        if re.match(regex, chroot_name):
            return True
    return False


def delay(msg, secs):
    if not sys.stdin.isatty():
        return
    for sec in range(secs):
        newstr = "\r%s(%s of %s)" % (msg, sec + 1, secs)
        sys.stdout.write(newstr)
        sys.stdout.flush()
        time.sleep(1)


def _filter_chroots(chroots):
    ret = []
    for chroot in chroots:
        for skipchrootregex in SKIPCHROOTS:
            if re.match(skipchrootregex, chroot):
                break
        else:
            ret.append(chroot)
    return ret


class Copr(object):
    """
    Wrapper class for talking to copr
    """
    OWNER_NAME = "@virtmaint-sig"
    PROJECT_NAME = "virt-preview"
    CLI_NAME = "%s/%s" % (OWNER_NAME, PROJECT_NAME)

    def __init__(self):
        self._client = copr.v3.Client.create_from_config_file()
        self._project = self._client.project_proxy.get(
                ownername=Copr.OWNER_NAME,
                projectname=Copr.PROJECT_NAME)

        unfiltered_chroots = self._project["chroot_repos"].keys()
        self._chroots = _filter_chroots(unfiltered_chroots)
        log.debug("Unfiltered chroot list: %s", unfiltered_chroots)
        log.debug("Filtered chroot list: %s", self._chroots)

        self._builds = self._client.build_proxy.get_list(
                ownername=Copr.OWNER_NAME,
                projectname=Copr.PROJECT_NAME)

        for build in self._builds:
            if build["state"] == "running":
                print("Some builds still in 'running' state. "
                      "not performing any builds.")
                sys.exit(1)

    def get_built_verrels(self):
        """
        Ask copr for a list of latest build objects

        :returns: dict of (chroot_name: {package_name: latest_verrel})
        """
        # Filter out failed builds
        builds = [b for b in self._builds if b["state"] == "succeeded"]
        # Ensure we sort by latest builds
        builds.sort(key=lambda b: b["id"])

        # Only check for builds in chroots we still care about
        chroot_verrels = {}
        for chroot in self._chroots:
            chroot_verrels[chroot] = {}

        for build in builds:
            package_name = build["source_package"]["name"]
            verrel = package_name + "-" + build["source_package"]["version"]
            for chroot in build["chroots"]:
                if chroot in chroot_verrels:
                    chroot_verrels[chroot][package_name] = verrel

        return chroot_verrels


####################
# Helper functions #
####################

def get_koji_latest_verrels():
    """
    Query koji for the latest verrel build for rawhide of each
        package in PACKAGE_NAMES

    :returns: dict of package_name:verrel
    """
    verrels = {}
    for package_name in PACKAGE_NAMES:
        cmd = ["koji", "latest-build", "--quiet", "rawhide", package_name]
        proc = subprocess.Popen(cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.STDOUT)
        out, dummy = proc.communicate()
        retcode = proc.wait()
        if retcode != 0:
            print("%s failed with ret=%s: %s" % (cmd, proc.wait(), out))
            sys.exit(retcode)
        verrels[package_name] = out.split()[0].decode("utf-8")

    return verrels


def determine_packages_to_update(koji_verrels, chroot_verrels):
    """
    Check what packages need updating from latest koji builds compared
    to already built verrels
    """
    def _remove_dist(s):
        """
        Strip dist (ex: .fc30) off end of verrel string
        """
        pattern = r"\.fc\d\d"
        if not re.search(pattern, s):
            print("verrel=%s doesn't contain pattern=%s" % (s, pattern))
            sys.exit(1)
        return re.sub(pattern, "", s)

    update_package_chroots = {}
    for package_name, koji_verrel in koji_verrels.items():
        koji_verrel = _remove_dist(koji_verrel)
        need_update = set()

        for chroot_name, built_verrels in chroot_verrels.items():
            if package_skip_chroot(package_name, chroot_name):
                continue
            if package_name not in built_verrels:
                need_update.add(chroot_name)
                continue

            built_verrel = _remove_dist(built_verrels[package_name])
            # built_verrel from copr will have epoch, strip it out
            built_verrel = re.sub("-[0-9]+:", "-", built_verrel)

            ver1 = ["1"] + built_verrel.rsplit("-", 1)
            ver2 = ["1"] + koji_verrel.rsplit("-", 1)

            log.debug("Comparing stripped verrels: "
                    "chroot_name=%s built=%s koji=%s", chroot_name, ver1, ver2)
            cmpret = rpm.labelCompare(tuple(ver1), tuple(ver2))
            if cmpret < 0:
                need_update.add(chroot_name)

        if need_update:
            update_package_chroots[package_name] = need_update

    return update_package_chroots


def build_package(package_name, chroots):
    distgiturl = "https://src.fedoraproject.org/rpms/%s" % package_name

    cmd = ["copr-cli",
            "buildscm", Copr.CLI_NAME,
            "--clone-url", distgiturl,
            "--commit", "rawhide"]
    for chroot in chroots:
        cmd += ["--chroot", chroot]

    print("\n\n+ %s" % " ".join(cmd))
    returncode = subprocess.call(cmd)
    return bool(returncode == 0)


#########################
# Main and CLI handling #
#########################

def parse_args():
    parser = argparse.ArgumentParser(
        description="Helper for maintaining virt-preview repo")

    parser.add_argument("-d", "--debug", action="store_true",
            help="Debug output")

    return parser.parse_args()


def setup_logging(debug):
    global logging
    handler = logging.StreamHandler(sys.stderr)
    handler.setFormatter(logging.Formatter(
        "[%(asctime)s] %(levelname)s (%(module)s:%(lineno)d) %(message)s",
        "%H:%M:%S"))
    log.addHandler(handler)
    log.setLevel(debug and logging.DEBUG or logging.ERROR)
    del(logging)


def build_packages():
    print("Checking koji for latest rawhide verrels...")
    coprapi = Copr()
    print("Checking copr for latest built verrels...")
    chroot_verrels = coprapi.get_built_verrels()
    log.debug("Chroot verrels:\n%s", pprint.pformat(chroot_verrels))

    koji_verrels = get_koji_latest_verrels()
    log.debug("Koji verrels:\n%s", pprint.pformat(koji_verrels))

    update_package_chroots = determine_packages_to_update(
            koji_verrels, chroot_verrels)
    if not update_package_chroots:
        print("Everything is up to date, nothing to build")
        return

    print("\nThe following packages need updating:\n")
    for p in sorted(update_package_chroots):
        print("* %s: %s" % (p, update_package_chroots[p]))

    print()
    delay("Proceeding in 10 seconds, ctrl-c to exit...", 10)
    print()

    failures = []
    for package_name in PACKAGE_NAMES:
        if package_name not in update_package_chroots:
            continue
        if package_name in TEMPSKIP:
            print("TEMPSKIPing package=%s" % package_name)
            continue

        chroots = update_package_chroots[package_name]
        build_success = build_package(package_name, chroots)
        if not build_success:
            failures.append(package_name)

    if failures:
        print("\n\nTHE FOLLOWING BUILDS FAILED: %s" % failures)
        return True


def main():
    options = parse_args()
    setup_logging(options.debug)

    if build_packages():
        return 1
    return 0


if __name__ == '__main__':
    sys.exit(main())
